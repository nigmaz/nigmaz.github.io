import idc, idautils, ida_bytes, idaapi

most_common_dlls = [
    "kernel32.dll",
    "comctl32.dll",
    "advapi32.dll",
    "comdlg32.dll",
    "gdi32.dll",
    "ws2_32.dll",
    "netapi32.dll",
    "ntdll.dll",
    "ntoskrnl.exe",
    "oleaut32.dll",
    "psapi.dll",
    "shell32.dll",
    "shlwapi.dll",
    "srvnet.dll",
    "urlmon.dll",
    "user32.dll",
    "winhttp.dll",
    "wininet.dll",
    "wshtcpip.dll",
    "advpack.dll",
    "ole32.dll",
    "rstrtmgr.dll",
    "iphlpapi.dll",
    "activeds.dll",
    "gdiplus.dll",
    "gredit.dll",
    "mpr.dll",
    "bcrypt.dll",
    "crypt32.dll",
    "wtsapi32.dll",
    "win32u.dll",
    "cryptbase.dll",
    "combase.dll",
    "winspool.drv",
]


def hash_131(s: str) -> int:
    h = 0
    bs = s.encode("ascii")
    for b in bs:
        if b == 0:
            break
        c = b
        if c <= 0x60:
            c = (c + 0x20) & 0xFF
        h = (h * 131 + c) & 0xFFFFFFFF
    return h


def get_dll_hash(call_addr):
    assign_hash_addr = idaapi.get_arg_addrs(call_addr)[0]
    hash_val = idc.get_operand_value(assign_hash_addr, 1)
    return hash_val & 0xFFFFFFFF


def main():
    func_addr = 0x00000000004017F4
    for xref in idautils.XrefsTo(func_addr):
        xref_addr = xref.frm
        if ida_bytes.is_code(ida_bytes.get_full_flags(xref_addr)):
            print(
                f'[+] Processing call to "fn_get_dll_address_by_hash" function at: 0x{xref_addr:X}'
            )
            dll_hash = get_dll_hash(xref_addr)
            for dll_name in most_common_dlls:
                dll_hash_calced = hash_131(dll_name)
                if dll_hash_calced == dll_hash:
                    print(f"Dll hash: {dll_hash:X} -> Dll found: {dll_name}")
                    idc.set_cmt(xref_addr, dll_name, 0)


if __name__ == "__main__":
    main()
