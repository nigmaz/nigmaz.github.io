import json, idc, ida_kernwin, ida_enum, idautils, ida_bytes, idaapi


def get_api_hash(call_addr):
    assign_hash_addr = idaapi.get_arg_addrs(call_addr)[2]
    # print(assign_hash_addr)
    hash_val = idc.get_operand_value(assign_hash_addr, 1) & 0xFFFFFFFF
    # print(hex(hash_val))
    return hash_val & 0xFFFFFFFF


# def get_enum_const(constant):
#     """Return (name, enum_id) for an enum constant, or None if not found."""
#     try:
#         # chuẩn hoá về u32 (tuỳ binary bạn có thể đổi thành 0xFFFFFFFFFFFFFFFF)
#         val = int(constant) & 0xFFFFFFFF
#     except Exception:
#         return None

#     # Duyệt tất cả enum và các member của chúng
#     for eid in idautils.Enums():
#         # Fallback bền vững: iterate toàn bộ members
#         for cid, cname, cval in idautils.EnumMembers(eid):
#             if (cval & 0xFFFFFFFF) == val:
#                 return (cname, eid)

#     return None


def get_enum_const(constant):
    """Return (name, enum_id) for an enum constant, or None if not found."""
    try:
        val = int(constant) & 0xFFFFFFFF
    except Exception:
        return None

    BAD_EID = getattr(idaapi, "BADADDR", 0xFFFFFFFFFFFFFFFF)
    BAD_CID = getattr(idaapi, "BADNODE", 0xFFFFFFFFFFFFFFFF)

    # Bắt đầu từ enum đầu tiên trong DB
    eid = ida_enum.get_first_enum()
    while eid not in (BAD_EID, None):
        serial = 0
        while True:
            # IDA có khác tên API giữa các version; thử lần lượt:
            if hasattr(ida_enum, "get_enum_member_by_value"):
                cid = ida_enum.get_enum_member_by_value(eid, val, serial)
            elif hasattr(ida_enum, "get_enum_member_id"):
                cid = ida_enum.get_enum_member_id(eid, val, serial)
            else:
                # Fallback mỏng sang idc nếu cần (vẫn giữ tinh thần ida_enum là chính)
                cid = idc.get_enum_member(eid, val, serial)

            if cid in (-1, BAD_CID, None):
                break  # hết candidate cho enum này

            # Lấy tên hằng từ const-id
            if hasattr(ida_enum, "get_const_name"):
                name = ida_enum.get_const_name(cid)
            else:
                name = idc.get_enum_member_name(cid)

            if name:
                return (name, eid)

            serial += 1

        # enum kế tiếp
        eid = ida_enum.get_next_enum(eid)

    return None


def convert_offset_to_enum(addr):
    n_operand = 0
    if idc.print_insn_mnem(addr) == "push":
        constant = idc.get_operand_value(addr, 0)

    elif idc.print_insn_mnem(addr) == "mov":
        constant = idc.get_operand_value(addr, 1) & 0xFFFFFFFF
        n_operand = 1
    enum_data = get_enum_const(constant)
    if enum_data:
        name, enum_id = enum_data
        idc.op_enum(addr, n_operand, enum_id, 0)
        return True
    else:
        return False


def enum_for_xrefs(func_addr, json_data, enum_id):
    for xref in idautils.XrefsTo(func_addr, flags=0):
        call_addr = xref.frm
        if ida_bytes.is_code(ida_bytes.get_full_flags(call_addr)):
            print(
                f"[+] Processing call to mw_find_dll_by_hash function at: {call_addr:#x}"
            )
            assign_hash_addr, api_hash = get_api_hash(call_addr)

            if api_hash in json_data:
                api_name = json_data[api_hash]
                ida_enum.add_enum_member(
                    enum_id, str(api_name), int(api_hash), idaapi.BADADDR
                )

                if convert_offset_to_enum(assign_hash_addr):
                    print(
                        f"    [-] Converted 0x{idc.get_operand_value(assign_hash_addr, 1):x} "
                        f"to {api_name} enumeration"
                    )
                    idc.set_cmt(
                        call_addr, str(api_name.split("func_")[1].replace("_", "!")), 0
                    )

                real_api_call = call_addr
                while real_api_call != idc.BADADDR:
                    real_api_call = idc.next_head(real_api_call)
                    if (
                        idc.print_insn_mnem(real_api_call) == "call"
                        and idc.get_operand_type(real_api_call, 0) == idc.o_reg
                    ):
                        idc.set_cmt(
                            real_api_call,
                            str(api_name.split("func_")[1].replace("_", "!")),
                            0,
                        )
                        break


def main():
    json_file = ida_kernwin.ask_file(0, "*.json*", "Choose json file...")
    if json_file is None:
        return

    with open(json_file, "rb") as fh:
        json_data = json.loads(fh.read())
        fh.close()

    # convert string keys -> int
    for k, v in list(json_data.items()):
        json_data[int(k)] = v

    target_function = 0x180001059  # mw_find_dll_by_hash

    """Adds enum api_name"""
    if ida_enum.get_enum("API_FUNCTIONS") != 0xFFFFFFFFFFFFFFFF:
        print("Enum already exists!!")
        return -1
    else:
        enum_id = ida_enum.add_enum(0, "API_FUNCTIONS", ida_bytes.hex_flag())

    enum_for_xrefs(target_function, json_data, enum_id)


if __name__ == "__main__":
    main()
